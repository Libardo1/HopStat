folname <- "Collaboration_Word"
rmdname <- file.path(wpdir, folname,  paste0(folname, ".Rmd"))
stopifnot(file.exists(rmdname))
opts_knit$set(base.url = paste0('https://dl.dropboxusercontent.com/u/600586/', wpfol, '/'),
base.dir = wpdir)
knit2wp(rmdname,
title = 'Collaboration - End of the Word (MS Word that is)', shortcode=TRUE)
rm(list=ls())
library(tm)
library(stringr)
uri <- "2013_abstract.pdf"
download.file("http://www.enar.org/meetings2013/2013_abstracts.pdf", uri)
last <- function(x) {
l <- length(x)
if (l == 0) return(NA)
x[l]
}
program <- "2013_program.pdf"
download.file("http://www.enar.org/meetings2013/2013_Spring_Preliminary_Program.pdf", uri)
posters <- readPDF(PdftotextOptions = "-f 22 -l 38")(elem = list(uri = uri),
language = "en",
id = "idprog")
pres <- readPDF(PdftotextOptions = "-f 39 -l 130 -layout")(elem = list(uri = uri),
language = "en",
id = "idprog")
pp <- gsub("(.*((a|p)\\.\\m.)).*", "\\1", pres)
times <- grepl("(a|p)\\.\\m.", pp)
pp[!times] <- NA
need to take out particulate matter
pp <- gsub("On the Use of a p.m.", "", pp)
take out when session talks about lenght of next segment
pp[grepl("-", pp)] <- NA
pp
pp <- gsub("(.*((a|p)\\.\\m.)).*", "\\1", pres)
times <- grepl("(a|p)\\.\\m.", pp)
pp[!times] <- NA
need to take out particulate matter
pp <- gsub("On the Use of a p.m.", "", pp)
take out when session talks about lenght of next segment
pp[grepl("-", pp)] <- NA
pp <- gsub("[A-Z]", "", pp)
pp
pp <- gsub("(.*((a|p)\\.\\m.)).*", "\\1", pres)
times <- grepl("(a|p)\\.\\m.", pp)
pp[!times] <- NA
need to take out particulate matter
pp <- gsub("On the Use of a p.m.", "", pp)
take out when session talks about lenght of next segment
pp[grepl("-", pp)] <- NA
pp <- gsub("[A-Z]", "", pp)
pp <- str_trim(pp)
pp
table(pp)
pp <- gsub("(.*((a|p)\\.\\m.)).*", "\\1", pres)
times <- grepl("(a|p)\\.\\m.", pp)
pp[!times] <- NA
need to take out particulate matter
pp <- gsub("On the Use of a p.m.", "", pp)
take out when session talks about lenght of next segment
pp[grepl("–", pp)] <- NA
pp <- gsub("[A-Z]", "", pp)
pp <- str_trim(pp)
table(pp)
source('')
new.beta <- function(se, b){
Cbeta <- solve((se^{-1} * XtX + true.sbeta^{-1} * diag(p)))
hbeta <- - Cbeta %*% t(X) %*% (se^{-1}* Z %*% b - se^{-1} * Y)
beta <- rnorm(p, mean=hbeta, sd=sqrt(Cbeta))
}
new.b <- function(se, sb, beta){
Cb <- solve((se^{-1} * ZtZ + sb^{-1} * diag(q)))
hb <- - Cb %*% t(Z) %*% (se^{-1}* X %*% beta - se^{-1} * Y)
b <- rnorm(q, mean=hb, sd=sqrt(Cb))
}
new.sb <- function(b){
alpha <- q/2 + true.alphab
beta <- 1/2*t(b)%*% b + true.gb
rigamma(n=1, alpha=alpha, beta=beta)
}
new.se <- function(beta, b){
alpha <- n/2 + true.alphae
eps <- Y - X%*% beta - Z%*% b
beta <- 1/2* t( eps )%*% eps + true.ge
rigamma(n=1, alpha=alpha, beta=beta)
}
n <- 1000
### assuming α, β parameterization
true.sbeta <- 0.9
true.alphae <- 1
true.alphab <- 0.5
true.gb <- 0.5
true.ge <- 2
X <- Z <- matrix(rep(1, n), ncol=1)
XtX <- t(X) %*% X
ZtZ <- t(Z) %*% Z
p <- ncol(X)
q <- ncol(Z)
true.beta <- rnorm(n= p, mean=0, sd=sqrt(true.sbeta))
true.sb <- rigamma(1, alpha=true.alphab, beta=true.gb)
true.se <- rigamma(1, alpha=true.alphae, beta=true.ge)
true.b <- rnorm(n = q, sd=sqrt(true.sb))
true.e <- rnorm(n = 1000, sd=sqrt(true.se))
Y <- X%*%true.beta + Z%*%true.b + true.e
sb0 <- se0 <- 1
b0 <- 0.5
beta0 <- 0.5
beta <- beta0
se <- se0
sb <- sb0
b <- b0
nrun <- 20000
ests <- matrix(NA, ncol=4, nrow=nrun)
true.vec <- c(true.beta, true.b, true.se, true.sb)
for (irow in 1:nrun){
beta <- new.beta(se=se, b=b)
b <- new.b(se=se,sb=sb, beta=beta)
se <- new.se(beta=beta, b=b)
sb <- new.sb(b=b)
est.vec <- c(beta, b, se, sb)
ests[irow, ] <- est.vec
print(max(abs(true.vec-est.vec)))
print(irow)
}
rm(list=ls())
library(reshape2)
library(lme4)
library(MASS)
library(nlme)
library(pscl)
new.beta <- function(se, b){
Cbeta <- solve((se^{-1} * XtX + true.sbeta^{-1} * diag(p)))
hbeta <- - Cbeta %*% t(X) %*% (se^{-1}* Z %*% b - se^{-1} * Y)
beta <- rnorm(p, mean=hbeta, sd=sqrt(Cbeta))
}
new.b <- function(se, sb, beta){
Cb <- solve((se^{-1} * ZtZ + sb^{-1} * diag(q)))
hb <- - Cb %*% t(Z) %*% (se^{-1}* X %*% beta - se^{-1} * Y)
b <- rnorm(q, mean=hb, sd=sqrt(Cb))
}
new.sb <- function(b){
alpha <- q/2 + true.alphab
beta <- 1/2*t(b)%*% b + true.gb
rigamma(n=1, alpha=alpha, beta=beta)
}
new.se <- function(beta, b){
alpha <- n/2 + true.alphae
eps <- Y - X%*% beta - Z%*% b
beta <- 1/2* t( eps )%*% eps + true.ge
rigamma(n=1, alpha=alpha, beta=beta)
}
n <- 1000
### assuming α, β parameterization
true.sbeta <- 0.9
true.alphae <- 1
true.alphab <- 0.5
true.gb <- 0.5
true.ge <- 2
X <- Z <- matrix(rep(1, n), ncol=1)
XtX <- t(X) %*% X
ZtZ <- t(Z) %*% Z
p <- ncol(X)
q <- ncol(Z)
true.beta <- rnorm(n= p, mean=0, sd=sqrt(true.sbeta))
true.sb <- rigamma(1, alpha=true.alphab, beta=true.gb)
true.se <- rigamma(1, alpha=true.alphae, beta=true.ge)
true.b <- rnorm(n = q, sd=sqrt(true.sb))
true.e <- rnorm(n = 1000, sd=sqrt(true.se))
Y <- X%*%true.beta + Z%*%true.b + true.e
sb0 <- se0 <- 1
b0 <- 0.5
beta0 <- 0.5
beta <- beta0
se <- se0
sb <- sb0
b <- b0
nrun <- 20000
ests <- matrix(NA, ncol=4, nrow=nrun)
true.vec <- c(true.beta, true.b, true.se, true.sb)
for (irow in 1:nrun){
beta <- new.beta(se=se, b=b)
b <- new.b(se=se,sb=sb, beta=beta)
se <- new.se(beta=beta, b=b)
sb <- new.sb(b=b)
est.vec <- c(beta, b, se, sb)
ests[irow, ] <- est.vec
print(max(abs(true.vec-est.vec)))
print(irow)
}
tail(ests)
true.vec
library(xkcd)
data <- data.frame(x=seq(0.01, 5, by=0.01))
data$y <- exp(data$x)
g <- ggplot(data=data, aes(x=x, y=y)) + geom_line() +theme_xkcd()
g
vignette("xkcd-intro")
xrange <- range(mtcars$mpg)
yrange <- range(mtcars$wt)
p <- ggplot() + geom_point(aes(mpg, wt), data=mtcars) +    ￼xkcdaxis(xrange,yrange)
p <- ggplot() + geom_point(aes(mpg, wt), data=mtcars) + ￼xkcdaxis(xrange,yrange)
p <- ggplot() + geom_point(aes(mpg, wt), data=mtcars) + ￼xkcdaxis(xrange,yrange)
p <- ggplot()+ geom_point(aes(mpg, wt), data=mtcars) + ￼xkcdaxis(xrange,yrange)
p <- ggplot()+ geom_point(aes(mpg, wt), data=mtcars)
p <- ggplot()+ geom_point(aes(mpg, wt), data=mtcars) + xkcdaxis(xrange, yrange)
g
p
xrange <- range(data$x)
yrange <- range(data$y)
g <- ggplot() + geom_line( aes(x=x, y=y), data=data)) +xkcdaxis(xrange, yrange)
g <- ggplot() + geom_line( aes(x=x, y=y), data=data) +xkcdaxis(xrange, yrange)
g
paste0("12345abcdefghijkliost'", '"$!, ')
n <- paste0("12345abcdefghijkliost'", '"$!, ')
nchar(n)
2^nchar(n)
2^nchar(n)/600
2^nchar(n)/600/60
n <- paste0("12345abcdefghijkliost'", '"$!, ')
ss <- strsplit(n, "")
ss
27*27*27*27*27*27*27
27*27*27*27*27*27*27/600
27*27*27*27*27*27*27/600/60
27*27*27*27*27*27*27/600/60/60
27*27*27*27*27*27*27/600/60/60/24
n <- paste0("12345abcdefghijkliost'", '"$!, ')
ss <- strsplit(n, "")[[1]]
combn(ss, 2)
combn(ss, 8)
n <- paste0("12345abcdefghijkliost'", '"$!, ')
ss <- strsplit(n, "")[[1]]
combs <- combn(ss, 8)
combs
head(combs[1:5, 1:5])
head(combs[1:5, ])
dim(combs)
combs <- apply(combs, 2, paste, sep="", collapse="")
nchar("FreakThatBitchOutTon")
library(lme4)
install.packages("glmer2stan")
library(devtools)
install_github("glmer2stan", "rmcelreath")
library(lme4)
library(glmer2stan)
data(sleepstudy) # built into lme4
m1_lme4 <- lmer( Reaction ~ Days + (Days | Subject), sleepstudy, REML=FALSE )
# construct subject index --- glmer2stan forces you to manage your own cluster indices
sleepstudy$subject_index <- as.integer(as.factor(sleepstudy$Subject))
# fit with glmer2stan
m1_g2s <- lmer2stan( Reaction ~ Days + (Days | subject_index), data=sleepstudy )
install.packages("rstan")
install.packages('inline')
install.packages('Rcpp')
options(repos = c(getOption("repos"), rstan = "http://wiki.rstan-repo.googlecode.com/git/"))
install.packages('rstan', type = 'source')
x <- rnorm(100, mean=5, sd=2)
hist(x, main="Histogram of Normal", density=TRUE)
d <- density(x)
?hist
x <- rnorm(100, mean=5, sd=2)
hist(x, main="Histogram of Normal", freq=FALSE)
d <- density(x)
lines(d)
x <- rnorm(100, mean=5, sd=2)
hist(x, main="Histogram of Normal", freq=FALSE, color="red")
d <- density(x)
lines(d, color="green", lwd=2)
x <- rnorm(100, mean=5, sd=2)
hist(x, main="Histogram of Normal", freq=FALSE, col="red")
d <- density(x)
lines(d, col="green", lwd=2)
### generate normal data, plot a histogram and draw a smoothed density
x = rnorm(100, mean=5, sd=2)
# = assigns (aka creates R things (call them objects or variables) that can be used)
hist(x, main="Histogram of Normal", freq=FALSE, col="red")
### hist is a function for plotting
d <- density(x) # <- assigns, let's make a "density estimate" (think of it as a smoothed histogram)
lines(d, col="green", lwd=2) ## let's add it to the plot
library(rgl)
?contour3d
library(misc3d)
?contour3d
library(rgl)
?writeOBJ
?writeSTL
?writeWebGL
library(misc3d); ?contour3d
system.time({
#Example 4: Separate the triangles from the contours of
#           mixture of three tri-variate normal densities
nmix3 <- function(x, y, z, m, s) {
0.3*dnorm(x, -m, s) * dnorm(y, -m, s) * dnorm(z, -m, s) +
0.3*dnorm(x, -2*m, s) * dnorm(y, -2*m, s) * dnorm(z, -2*m, s) +
0.4*dnorm(x, -3*m, s) * dnorm(y, -3 * m, s) * dnorm(z, -3*m, s) }
f <- function(x,y,z) nmix3(x,y,z,0.5,.1)
n <- 20
x <- y <- z <- seq(-2, 2, len=n)
contour3dObj <- contour3d(f, 0.35, x, y, z, draw=FALSE, separate=TRUE)
for(i in 1:length(contour3dObj))
contour3dObj[[i]]$color <- rainbow(length(contour3dObj))[i]
drawScene.rgl(contour3dObj)
})
rm(list=ls())
library(XML)
library(RJSONIO)
library(stringr)
u <- "http://311.baltimorecity.gov/open311/v2/requests.json?api_key=d90fdaff7eae3dec932ab23313c54da8&jurisdiction_id=baltimorecity.gov&service_code=4e39a3abd3e2c20ed800001d"
## test data set
####u <- "http://311test.baltimorecity.gov/open311/v2/requests.json?api_key=d90fdaff7eae3dec932ab23313c54da8&jurisdiction_id=baltimorecity.gov&service_code=4e39a3abd3e2c20ed800001d"
ff <- url(u)
#ff <- url()
x <- readLines(ff)
close(ff)
J <- fromJSON(x, asText=TRUE )
cnames <- c("service_request_id", "token", "status","service_name", "service_code", "description", "requested_datetime", "updated_datetime", "lat", "long", "address", "status_notes", "media_url")
J <- lapply(J, function(x) {
if (! "address" %in% names(x)) x <- c(x, address=NA)
if (! "status_notes" %in% names(x)) x <- c(x, status_notes=NA)
#	x <- x[!names(x) %in% "media_url"]
x <- x[cnames]
x
})
data <- data.frame(do.call("rbind", J), stringsAsFactors=FALSE)
colnames(data) <- cnames
for (icol in cnames) {
x <- data[, icol]
if (class(x) == "list") {
#print(icol)
x <- sapply(x, function(dd) ifelse(is.null(dd), NA, dd))
data[, icol] <- unlist(x)
}
data[,icol][data[,icol] == ""] <- NA
}
data$description <- str_trim(data$description)
data$address <- toupper(data$address)
data$description <- toupper(data$description)
#ss <- strsplit(data$)
pot <- data[grepl("OMBARD", data$address) | grepl("OLLING", data$address) |
grepl("OMBARD", data$description) | grepl("OLLING", data$description) |
grepl("ANN", data$description) | grepl("BROADWAY", data$description) |
grepl("PRATT", data$description) | grepl("BLUE", data$description) |
grepl("TRUCK", data$description) |
is.na(data$description), c("status", "description", "address", "updated_datetime",
"requested_datetime", "status_notes", "media_url")]
pot$Req_Date <- as.Date(substr(pot$requested_datetime, 1, 10), "%Y-%m-%d")
pot$Req_Year <- as.numeric(substr(pot$requested_datetime, 1, 4))
pot <- pot[!(pot$status %in% "closed"), ]
pot <- pot[!grepl("MOTORCYCLE", pot$description) | !grepl("SONATA", pot$description), ]
#pot <- pot[pot$status == "open", ]
print(pot)
#print(head(pot))
rm(list=ls())
library(XML)
library(RJSONIO)
library(stringr)
u <- "http://311.baltimorecity.gov/open311/v2/requests.json?api_key=d90fdaff7eae3dec932ab23313c54da8&jurisdiction_id=baltimorecity.gov&service_code=4e39a3abd3e2c20ed800001d"
## test data set
####u <- "http://311test.baltimorecity.gov/open311/v2/requests.json?api_key=d90fdaff7eae3dec932ab23313c54da8&jurisdiction_id=baltimorecity.gov&service_code=4e39a3abd3e2c20ed800001d"
ff <- url(u)
#ff <- url()
x <- readLines(ff)
close(ff)
J <- fromJSON(x, asText=TRUE )
cnames <- c("service_request_id", "token", "status","service_name", "service_code", "description", "requested_datetime", "updated_datetime", "lat", "long", "address", "status_notes", "media_url")
J <- lapply(J, function(x) {
if (! "address" %in% names(x)) x <- c(x, address=NA)
if (! "status_notes" %in% names(x)) x <- c(x, status_notes=NA)
#	x <- x[!names(x) %in% "media_url"]
x <- x[cnames]
x
})
data <- data.frame(do.call("rbind", J), stringsAsFactors=FALSE)
colnames(data) <- cnames
for (icol in cnames) {
x <- data[, icol]
if (class(x) == "list") {
#print(icol)
x <- sapply(x, function(dd) ifelse(is.null(dd), NA, dd))
data[, icol] <- unlist(x)
}
data[,icol][data[,icol] == ""] <- NA
}
data$description <- str_trim(data$description)
data$address <- toupper(data$address)
data$description <- toupper(data$description)
#ss <- strsplit(data$)
pot <- data[grepl("OMBARD", data$address) | grepl("OLLING", data$address) |
grepl("OMBARD", data$description) | grepl("OLLING", data$description) |
grepl("ANN", data$description) | grepl("BROADWAY", data$description) |
grepl("PRATT", data$description) | grepl("BLUE", data$description) |
grepl("TRUCK", data$description) |
is.na(data$description), c("status", "description", "address", "updated_datetime",
"requested_datetime", "status_notes", "media_url")]
pot$Req_Date <- as.Date(substr(pot$requested_datetime, 1, 10), "%Y-%m-%d")
pot$Req_Year <- as.numeric(substr(pot$requested_datetime, 1, 4))
pot
library(data.table)
DT <- data.table(x=1:5, y=6:10, z=11:15)
DT[, m := log2( (x+1) / (y+1) )]
DT
DT[, x, y z]
DT[, c(x, y, z)]
DT[, x, y, z]
DT[, list(x, y, z)]
library(data.table); library(microbenchmark)
DT1 <- data.table(x=c('a', 'a', 'b', 'dt1'), y=1:4)
DT2 <- data.table(x=c('a', 'b', 'dt2'), z=5:7)
setkey(DT1, x)
setkey(DT2, x)
merge(DT1, DT2, all.x=TRUE)
DT1
DT2
library(data.table); library(microbenchmark)
DT1 <- data.table(x=c('a', 'a', 'b', 'dt1'), y=1:4)
DT2 <- data.table(x=c('a', 'b', 'dt2'), z=5:7)
setkey(DT1, x)
setkey(DT2, x)
d3 = merge(DT1, DT2, all.x=TRUE)
d3
install.packages("microbenchmark")
library(data.table); library(microbenchmark)
DT1 <- data.table(x=c('a', 'a', 'b', 'dt1'), y=1:4)
DT2 <- data.table(x=c('a', 'b', 'dt2'), z=5:7)
setkey(DT1, x)
setkey(DT2, x)
merge(DT1, DT2, all.x=TRUE)
d3
library(data.table); library(microbenchmark)
DT1 <- data.table(x=c('a', 'a', 'b', 'dt1'), y=1:4)
DT2 <- data.table(x=c('a', 'b', 'dt2'), z=5:7)
setkey(DT1, x)
setkey(DT2, x)
d3 = merge(DT1, DT2, all.x=TRUE)
d3
DT2
DT1
?write.foreign
?write.dta
library(foreign)
update.packages("foreign")
library(foreign)
setwd("~/Dropbox/")
setwd("~/Dropbox/Public/WordPress_Hopstat/Stata_Markdown/")
rm(list=ls())
library(XML)
library(RJSONIO)
library(stringr)
u <- "http://311.baltimorecity.gov/open311/v2/requests.json?api_key=d90fdaff7eae3dec932ab23313c54da8&jurisdiction_id=baltimorecity.gov&service_code=4e39a3abd3e2c20ed800001d"
## test data set
####u <- "http://311test.baltimorecity.gov/open311/v2/requests.json?api_key=d90fdaff7eae3dec932ab23313c54da8&jurisdiction_id=baltimorecity.gov&service_code=4e39a3abd3e2c20ed800001d"
ff <- url(u)
#ff <- url()
x <- readLines(ff)
close(ff)
J <- fromJSON(x, asText=TRUE )
cnames <- c("service_request_id", "token", "status","service_name", "service_code", "description", "requested_datetime", "updated_datetime", "lat", "long", "address", "status_notes", "media_url")
J <- lapply(J, function(x) {
if (! "address" %in% names(x)) x <- c(x, address=NA)
if (! "status_notes" %in% names(x)) x <- c(x, status_notes=NA)
#	x <- x[!names(x) %in% "media_url"]
x <- x[cnames]
x
})
data <- data.frame(do.call("rbind", J), stringsAsFactors=FALSE)
colnames(data) <- cnames
for (icol in cnames) {
x <- data[, icol]
if (class(x) == "list") {
#print(icol)
x <- sapply(x, function(dd) ifelse(is.null(dd), NA, dd))
data[, icol] <- unlist(x)
}
data[,icol][data[,icol] == ""] <- NA
}
data$description <- str_trim(data$description)
data$address <- toupper(data$address)
data$description <- toupper(data$description)
#ss <- strsplit(data$)
pot <- data[grepl("OMBARD", data$address) | grepl("OLLING", data$address) |
grepl("OMBARD", data$description) | grepl("OLLING", data$description) |
grepl("ANN", data$description) | grepl("BROADWAY", data$description) |
grepl("PRATT", data$description) | grepl("BLUE", data$description) |
grepl("TRUCK", data$description) |
is.na(data$description), c("status", "description", "address", "updated_datetime",
"requested_datetime", "status_notes", "media_url")]
pot$Req_Date <- as.Date(substr(pot$requested_datetime, 1, 10), "%Y-%m-%d")
pot$Req_Year <- as.numeric(substr(pot$requested_datetime, 1, 4))
pot <- pot[!(pot$status %in% "closed"), ]
pot <- pot[!grepl("MOTORCYCLE", pot$description) | !grepl("SONATA", pot$description), ]
#pot <- pot[pot$status == "open", ]
print(pot)
#print(head(pot))
library(knitr)
if (!require('RWordPress'))
install.packages('RWordPress',
repos = 'http://www.omegahat.org/R',
type = 'source')
library(RWordPress)
options(WordpressLogin = c(strictlystat = 'hopkinsstat'))
uname <- names(getOption("WordpressLogin"))
options( WordpressURL = paste0('http://hopstat.wordpress.com/xmlrpc.php'))
wpfol <- "WordPress_Hopstat"
wpdir <- file.path("~/Dropbox/Public", wpfol)
wpdir <- path.expand(wpdir)
### change this for the new folder
folname <- "Stata_Markdown"
rmdname <- file.path(wpdir, folname,  paste0(folname, ".Rmd"))
stopifnot(file.exists(rmdname))
opts_knit$set(base.url = paste0('https://dl.dropboxusercontent.com/u/600586/', wpfol, '/'),
base.dir = wpdir)
knit2wp(rmdname,
title = 'Stata Markdown', shortcode=TRUE)
